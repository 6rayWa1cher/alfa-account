{"version":3,"sources":["util.js","component/EditableCell/EditableCell.jsx","config.js","component/ActionBar/ActionBar.jsx","component/AccountTableRow/AccountTableRow.jsx","component/AccountTable/AccountTable.jsx","component/FileChooser/FileChooser.jsx","component/TransactionLoader/TransactionLoader.jsx","component/TransactionStats/TransactionStats.jsx","component/App/App.jsx","index.js"],"names":["dateToString","dateIn","yyyy","getFullYear","mm","getMonth","dd","getDate","out","moneyRound","amount","Math","round","EditableCell","edit","setEdit","value","setValue","notOriginal","useState","innerValue","setInnerValue","className","type","onChange","evt","val","target","replace","test","parseFloat","onKeyUp","key","onClick","splitStrategies","total","left","ActionBar","transaction","handleTransactionChange","splitAction","func","right","original","AccountTableRow","editing","setEditing","console","log","date","store","v","AccountTable","transactions","map","t","id","loadFileContent","file","a","Promise","resolve","reject","fr","FileReader","onload","event","result","onerror","err","readAsText","FileChooser","updateTransactions","files","then","processFileContent","fileText","dateFrom","dateTo","header","lines","split","length","newTransactions","descriptionRegexp","holdDescriptionRegexp","forEach","row","separated","m","currency","referrence","description","income","outcome","exec","groups","date2","shortStore","substring","lastIndexOf","splitTransaction","day","month","year","newTransactionPart","Date","push","sort","b","alert","TransactionLoader","setTransations","now","getDay","setDateFrom","setDateTo","arr","from","to","nt","TransactionStats","leftSum","reduce","acc","curr","rightSum","defaultTransactions","App","t1","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb64da70.chunk.js","sourcesContent":["export const dateToString = (dateIn) => {\n    const yyyy = dateIn.getFullYear();\n    const mm = dateIn.getMonth() + 1;\n    const dd = dateIn.getDate();\n    let out = '';\n    out += dd < 10 ? '0' + dd : dd;\n    out += '-';\n    out += mm < 10 ? '0' + mm : mm;\n    out += '-';\n    out += yyyy;\n    return out;\n};\n\nexport const moneyRound = (amount) => Math.round(amount * 100) / 100;","import React, { useState } from 'react';\n\nimport './EditableCell.css';\n\nconst EditableCell = ({\n    edit,\n    setEdit,\n    value,\n    setValue,\n    notOriginal\n}) => {\n    const [innerValue, setInnerValue] = useState(\"\" + value);\n\n    const className = notOriginal ? \"ChangedCell\" : \"\";\n    if (edit) {\n        return (\n            <td className={className}>\n                <input \n                    type=\"text\" \n                    onChange={evt => {\n                        const val = evt.target.value.replace(',', '.');\n                        if (/^-?\\d+(\\.\\d?\\d?)?$/.test(val)) {\n                            setInnerValue(val);\n                            setValue(parseFloat(val));\n                        }\n                    }} \n                    value={innerValue}\n                    onKeyUp={evt => {\n                        if (evt.key === 'Enter') setEdit(false);\n                    }}/>\n            </td>\n        );\n    } else {\n        return (\n            <td \n                className={className} \n                onClick={() => {\n                    setInnerValue(value);\n                    setEdit(true);\n                }}\n            >\n                {value}\n            </td>\n        );\n    }\n};\n\nexport default EditableCell;","import { moneyRound } from './util';\n\nexport const splitStrategies = {\n    fullFirst: (total) => [total, 0],\n    fullSecond: (total) => [0, total],\n    half: (total) => {\n        const left = moneyRound(total/2);\n        const right = total - left;\n        return [left, right];\n    },\n    default: (total) => [0, 0]\n};\n\nexport const splitTransaction = (store, total) => {\n    switch(store) {\n        case \"PEREKRESTOK\":\n        case \"PYATEROCHKA\":\n        case \"PYATEROCHKA 1\":\n        case \"TRANSPORTTVER\":\n        case \"APTECHNOE UCH\":\n        case \"APTEKA\":\n        case \"MODUS\":\n        case \"KRASNOE BELOE\":\n        case \"PEREKRESTOK B\":\n        case \"BISTRO ARZI 1\":\n            return splitStrategies.fullSecond(total);\n        case \"IP LINDIN YU\":\n        case \"HYPE PLACE OL\":\n        case \"YM ozon\":\n        case \"STEAMGAMES CO\":\n            return splitStrategies.fullFirst(total);\n        case \"HAPPY BURGER\":\n        case \"CHICKEN HOUSE\":\n        case \"MCDONALDS 245\":\n        case \"OOO OBED\":\n        case \"BREAKFAST BAN\":\n        case \"O ESKIMO\":\n            return splitStrategies.half(total);\n        default:\n            return splitStrategies.default(total);\n    }\n};\n","import React from 'react';\nimport { splitStrategies } from '@config';\n\nconst ActionBar = ({\n    transaction,\n    handleTransactionChange\n}) => {\n    const splitAction = (func) => () => {\n        const { total } = transaction;\n        const [left, right] = func(total);\n        handleTransactionChange({...transaction, left, right});\n    };\n    const reset = () => {\n        handleTransactionChange({...transaction, ...transaction.original});\n    };\n    return (\n        <>\n            <input type='button' onClick={splitAction(splitStrategies.fullFirst)} value=\"<==\" />\n            <input type='button' onClick={splitAction(splitStrategies.half)} value=\"1/2\" />\n            <input type='button' onClick={splitAction(splitStrategies.fullSecond)} value=\"==>\" />\n            <input type='button' onClick={reset} value=\"reset\" />\n        </>\n    );\n};\n\nexport default ActionBar;","import React, { useState } from 'react';\nimport { dateToString } from '@util';\nimport './AccountTableRow.css';\nimport EditableCell from '@component/EditableCell';\nimport ActionBar from '@component/ActionBar';\n\nconst AccountTableRow = ({\n    transaction,\n    handleTransactionChange\n}) => {\n    const [editing, setEditing] = useState(false);\n    console.log(transaction);\n    const {date, store, total, left, right} = transaction;\n\n    return (\n        <tr className={left + right !== total ? 'RedRow': null}>\n            <td>{dateToString(date)}</td>\n            <td>{store}</td>\n            <EditableCell \n                edit={editing} \n                setEdit={setEditing} \n                value={total} \n                setValue={v => handleTransactionChange({...transaction, total: v})}\n                notOriginal={total !== transaction.original.total}\n            />\n            <EditableCell \n                edit={editing} \n                setEdit={setEditing} \n                value={left} \n                setValue={v => handleTransactionChange({...transaction, left: v})}\n                notOriginal={left !== transaction.original.left}\n            />\n            <EditableCell \n                edit={editing} \n                setEdit={setEditing} \n                value={right} \n                setValue={v => handleTransactionChange({...transaction, right: v})}\n                notOriginal={right !== transaction.original.right}\n            />\n            <td><ActionBar transaction={transaction} handleTransactionChange={handleTransactionChange}/></td>\n        </tr>\n    );\n};\n\nexport default AccountTableRow;","import React from 'react';\nimport AccountTableRow from '@component/AccountTableRow';\nimport './AccountTable.css';\n\nconst AccountTable = ({\n    transactions,\n    handleTransactionChange\n}) => {\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <th>Дата</th>\n                    <th>Магазин</th>\n                    <th>Сумма</th>\n                    <th>Личный</th>\n                    <th>Возвратный</th>\n                    <th>Действия</th>\n                </tr>\n            </thead>\n            <tbody>\n                {transactions.map(t => (\n                    <AccountTableRow \n                        key={t.id} \n                        transaction={t} \n                        handleTransactionChange={handleTransactionChange} />\n                ))}\n            </tbody>\n        </table>\n    );\n};\n\nexport default AccountTable;","import React from 'react';\n\nconst loadFileContent = async (file) => new Promise((resolve, reject) => {\n    if (!file) {\n        resolve();\n        return;\n    }\n    const fr = new FileReader();\n    fr.onload = (event) => {\n        resolve(event.target.result);\n    };\n    fr.onerror = (err) => {\n        reject(err);\n    };\n    fr.readAsText(file, 'cp1251');\n});\n\n\nconst FileChooser = ({\n    updateTransactions\n}) => {\n    return (\n        <input \n            type=\"file\" \n            id=\"file-selector\" \n            onChange={event => loadFileContent(event.target.files[0]).then(updateTransactions)}\n        ></input>\n    );\n};\n\nexport default FileChooser;","import React, { useState } from 'react';\nimport DateRangePicker from '@wojtekmaj/react-daterange-picker';\nimport FileChooser from '@component/FileChooser';\nimport { splitTransaction } from '@config';\n\nimport \"./TransactionLoader.css\";\n\nconst processFileContent = (fileText, dateFrom, dateTo) => {\n    if (!fileText) {\n        return;\n    }\n    console.log(fileText);\n    const header = \"Тип счёта;Номер счета;Валюта;Дата операции;Референс проводки;Описание операции;Приход;Расход;\";\n    const lines = fileText.split('\\n');\n    if (lines.length === 0) {\n        alert(\"File content is empty!\")\n        return;\n    }\n    if (lines[0] !== header) {\n        alert(\"Header didn't matched!\");\n        return;\n    }\n    const newTransactions = [];\n    const descriptionRegexp = /^\\d+\\++\\d+ +(?<store>[a-zA-Z0-9\\\\ ]+?) +(?<date1>\\d\\d\\.\\d\\d\\.\\d\\d) (?<date2>\\d\\d\\.\\d\\d\\.\\d\\d).+$/;\n    const holdDescriptionRegexp = /^\\d+ [a-zA-Z]+ (?<store>[a-zA-Z0-9\\\\ ]+?) \\d+>[a-zA-Z ]+? (?<date1>\\d\\d\\.\\d\\d\\.\\d\\d) (?<date2>\\d\\d\\.\\d\\d\\.\\d\\d).+$/;\n    lines.forEach(row => {\n        if (header === row) return;\n        const separated = row.split(';');\n        delete separated[separated.length - 1];\n        const [, , currency, , referrence, description, income, outcome] = separated;\n        let m;\n        if (referrence === 'HOLD') {\n            m = holdDescriptionRegexp.exec(description);\n        } else {\n            m = descriptionRegexp.exec(description);\n        }\n        if (m === null) return;\n        const {store, date2} = m.groups;\n        const shortStore = store.substring(store.lastIndexOf('\\\\') + 1);\n        const total = Math.round((parseFloat(income.replace(',', '.')) - parseFloat(outcome.replace(',', '.'))) * 100) / 100;\n        const [left, right] = splitTransaction(shortStore, total);\n        const [day, month, year] = date2.split('.');\n        const newTransactionPart = {\n            id: newTransactions.length,\n            store: shortStore,\n            date: new Date(+year + 2000, month - 1, day),\n            total,\n            currency,\n            left,\n            right\n        };\n        if (!(dateFrom <= newTransactionPart.date && newTransactionPart.date <= dateTo)) return;\n        newTransactions.push({\n            ...newTransactionPart,\n            original: newTransactionPart\n        });\n    });\n    newTransactions.sort((a, b) => -(a.date - b.date));\n    return newTransactions;\n};\n\nconst TransactionLoader = ({\n    setTransations\n}) => {\n    const now = new Date();\n    const [dateFrom, setDateFrom] = useState(new Date(now.getFullYear(), now.getMonth() - 1, now.getDay()));\n    const [dateTo, setDateTo] = useState(now);\n\n    const updateTransactions = (fileText) => {\n        const nt = processFileContent(fileText, dateFrom, dateTo);\n        setTransations(nt);\n    }\n\n    return (\n        <div className=\"TransactionLoader\">\n            <div className=\"LeftPanel\">\n                <DateRangePicker value={[dateFrom, dateTo]} onChange={arr => {\n                    const [from, to] = arr;\n                    setDateFrom(from);\n                    setDateTo(to);\n                }}/>\n            </div>\n            <div className=\"RightPanel\">\n                <FileChooser updateTransactions={updateTransactions} />\n            </div>\n        </div>\n    );\n};\n\nexport default TransactionLoader;","import React from 'react';\nimport { moneyRound } from '@util';\n\nconst TransactionStats = ({\n    transactions\n}) => {\n    const leftSum = transactions.map(t => t.left).reduce((acc, curr) => moneyRound(acc + curr));\n    const rightSum = transactions.map(t => t.right).reduce((acc, curr) => moneyRound(acc + curr));\n    return (\n        <>\n            <div>\n                <span>Личный</span>\n                <span className=\"LeftSum\">\n                    {leftSum}\n                </span>\n            </div>\n            \n            <div>\n                <span>Возвратный</span> \n                <span className=\"RightSum\">\n                    {rightSum}\n                </span>\n            </div>\n        </>\n    )\n};\n\nexport default TransactionStats;","import React, { useState } from 'react';\n\nimport './App.css';\nimport AccountTable from '@component/AccountTable';\nimport TransactionLoader from '@component/TransactionLoader';\nimport TransactionStats from '@component/TransactionStats';\n\nlet defaultTransactions = [\n    {id: 0, store: 'PEREKRESTOK', date: new Date(), total: -850.23, left: 0, right: -850.23,\n    original: {id: 0, store: 'PEREKRESTOK', date: new Date(), total: -850.23, left: 0, right: -850.23}}\n];\n\nconst App = () => {\n    const [transactions, setTransations] = useState(defaultTransactions);\n\n    const handleTransactionChange = (t) => {\n        const newTransactions = transactions.map(t1 => t1.id === t.id ? t : t1);\n        setTransations(newTransactions);\n    };\n\n    return (\n        <div className='Container'>\n            <div className='Top'>\n                <TransactionStats transactions={transactions}/>\n                <TransactionLoader setTransations={setTransations}/>\n            </div>\n            <div className='Content'>\n                <AccountTable transactions={transactions} handleTransactionChange={handleTransactionChange}/>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '@component/App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}